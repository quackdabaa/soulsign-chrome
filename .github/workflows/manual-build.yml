name: 手动构建Chrome扩展

on:
  # 允许从Actions选项卡手动触发
  workflow_dispatch:
    inputs:
      version_bump:
        description: '版本更新类型'
        required: true
        default: 'none'
        type: choice
        options:
          - none
          - patch
          - minor
          - major

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: 安装依赖
        run: npm install

      - name: 更新版本号（如果需要）
        if: ${{ github.event.inputs.version_bump != 'none' }}
        run: |
          npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
          echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      # 检查是否存在扩展密钥文件
      - name: 检查扩展密钥
        id: check_key
        run: |
          if [ -f "key.pem" ]; then
            echo "key_exists=true" >> $GITHUB_OUTPUT
          else
            echo "key_exists=false" >> $GITHUB_OUTPUT
          fi

      # 如果没有密钥文件，创建一个新的
      - name: 创建扩展密钥（如果不存在）
        if: steps.check_key.outputs.key_exists == 'false'
        run: |
          openssl genrsa 2048 | openssl pkcs8 -topk8 -nocrypt -out key.pem

      # 修改manifest.js，添加key字段
      - name: 修改manifest添加key字段
        run: |
          # 创建一个临时脚本来修改manifest.js
          cat > update_manifest.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // 读取密钥文件
          const keyPath = path.resolve('key.pem');
          const key = fs.readFileSync(keyPath, 'utf8');
          
          // 读取manifest.js文件
          const manifestPath = path.resolve('src/manifest.js');
          let manifestContent = fs.readFileSync(manifestPath, 'utf8');
          
          // 检查manifest.js是否已经包含key字段
          if (!manifestContent.includes('key:')) {
            // 在manifest对象中添加key字段
            manifestContent = manifestContent.replace(
              'const manifest = {',
              'const manifest = {\n\tkey: `' + key.replace(/\\/g, '\\\\').replace(/`/g, '\\`').replace(/\$/g, '\\$') + '`,'
            );
            
            // 写回manifest.js文件
            fs.writeFileSync(manifestPath, manifestContent);
            console.log('已添加key字段到manifest.js');
          } else {
            console.log('manifest.js已包含key字段，无需修改');
          }
          EOF
          
          # 运行脚本
          node update_manifest.js

      - name: 构建扩展
        run: npm run build
        
      - name: 获取版本号
        id: get_version
        run: |
          if [ -z "$NEW_VERSION" ]; then
            echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          else
            echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: 重命名构建文件
        run: mv build.zip soulsign-chrome-${{ env.VERSION }}.zip

      - name: 上传构建文件
        uses: actions/upload-artifact@v4
        with:
          name: soulsign-chrome-${{ env.VERSION }}
          path: soulsign-chrome-${{ env.VERSION }}.zip
          retention-days: 30
          
      # 上传密钥文件作为加密的artifact，以便将来构建使用
      - name: 上传扩展密钥
        uses: actions/upload-artifact@v4
        with:
          name: extension-key
          path: key.pem
          retention-days: 30

      - name: 创建发布（如果版本已更新）
        if: ${{ github.event.inputs.version_bump != 'none' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: soulsign-chrome-${{ env.VERSION }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
